// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBannerStmt, err = db.PrepareContext(ctx, createBanner); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBanner: %w", err)
	}
	if q.deleteBannerStmt, err = db.PrepareContext(ctx, deleteBanner); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBanner: %w", err)
	}
	if q.getBannerStmt, err = db.PrepareContext(ctx, getBanner); err != nil {
		return nil, fmt.Errorf("error preparing query GetBanner: %w", err)
	}
	if q.listActiveBannersStmt, err = db.PrepareContext(ctx, listActiveBanners); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveBanners: %w", err)
	}
	if q.listBannersStmt, err = db.PrepareContext(ctx, listBanners); err != nil {
		return nil, fmt.Errorf("error preparing query ListBanners: %w", err)
	}
	if q.updateBannerStmt, err = db.PrepareContext(ctx, updateBanner); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBanner: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBannerStmt != nil {
		if cerr := q.createBannerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBannerStmt: %w", cerr)
		}
	}
	if q.deleteBannerStmt != nil {
		if cerr := q.deleteBannerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBannerStmt: %w", cerr)
		}
	}
	if q.getBannerStmt != nil {
		if cerr := q.getBannerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBannerStmt: %w", cerr)
		}
	}
	if q.listActiveBannersStmt != nil {
		if cerr := q.listActiveBannersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveBannersStmt: %w", cerr)
		}
	}
	if q.listBannersStmt != nil {
		if cerr := q.listBannersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBannersStmt: %w", cerr)
		}
	}
	if q.updateBannerStmt != nil {
		if cerr := q.updateBannerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBannerStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createBannerStmt      *sql.Stmt
	deleteBannerStmt      *sql.Stmt
	getBannerStmt         *sql.Stmt
	listActiveBannersStmt *sql.Stmt
	listBannersStmt       *sql.Stmt
	updateBannerStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createBannerStmt:      q.createBannerStmt,
		deleteBannerStmt:      q.deleteBannerStmt,
		getBannerStmt:         q.getBannerStmt,
		listActiveBannersStmt: q.listActiveBannersStmt,
		listBannersStmt:       q.listBannersStmt,
		updateBannerStmt:      q.updateBannerStmt,
	}
}
