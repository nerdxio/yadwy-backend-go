// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banners.sql

package db

import (
	"context"
	"database/sql"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO banners (
    title, image_url, target_url, is_active, position
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, title, image_url, target_url, is_active, position, created_at, updated_at
`

type CreateBannerParams struct {
	Title     string         `json:"title"`
	ImageUrl  string         `json:"image_url"`
	TargetUrl sql.NullString `json:"target_url"`
	IsActive  bool           `json:"is_active"`
	Position  string         `json:"position"`
}

func (q *Queries) CreateBanner(ctx context.Context, arg CreateBannerParams) (Banner, error) {
	row := q.queryRow(ctx, q.createBannerStmt, createBanner,
		arg.Title,
		arg.ImageUrl,
		arg.TargetUrl,
		arg.IsActive,
		arg.Position,
	)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.TargetUrl,
		&i.IsActive,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBanner = `-- name: DeleteBanner :exec
DELETE FROM banners
WHERE id = $1
`

func (q *Queries) DeleteBanner(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteBannerStmt, deleteBanner, id)
	return err
}

const getBanner = `-- name: GetBanner :one
SELECT id, title, image_url, target_url, is_active, position, created_at, updated_at FROM banners
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBanner(ctx context.Context, id int32) (Banner, error) {
	row := q.queryRow(ctx, q.getBannerStmt, getBanner, id)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.TargetUrl,
		&i.IsActive,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveBanners = `-- name: ListActiveBanners :many
SELECT id, title, image_url, target_url, is_active, position, created_at, updated_at FROM banners
WHERE is_active = true
ORDER BY created_at DESC
`

func (q *Queries) ListActiveBanners(ctx context.Context) ([]Banner, error) {
	rows, err := q.query(ctx, q.listActiveBannersStmt, listActiveBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Banner
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImageUrl,
			&i.TargetUrl,
			&i.IsActive,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBanners = `-- name: ListBanners :many
SELECT id, title, image_url, target_url, is_active, position, created_at, updated_at FROM banners
ORDER BY created_at DESC
`

func (q *Queries) ListBanners(ctx context.Context) ([]Banner, error) {
	rows, err := q.query(ctx, q.listBannersStmt, listBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Banner
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImageUrl,
			&i.TargetUrl,
			&i.IsActive,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBanner = `-- name: UpdateBanner :one
UPDATE banners
SET title = $2, 
    image_url = $3, 
    target_url = $4, 
    is_active = $5, 
    position = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, image_url, target_url, is_active, position, created_at, updated_at
`

type UpdateBannerParams struct {
	ID        int32          `json:"id"`
	Title     string         `json:"title"`
	ImageUrl  string         `json:"image_url"`
	TargetUrl sql.NullString `json:"target_url"`
	IsActive  bool           `json:"is_active"`
	Position  string         `json:"position"`
}

func (q *Queries) UpdateBanner(ctx context.Context, arg UpdateBannerParams) (Banner, error) {
	row := q.queryRow(ctx, q.updateBannerStmt, updateBanner,
		arg.ID,
		arg.Title,
		arg.ImageUrl,
		arg.TargetUrl,
		arg.IsActive,
		arg.Position,
	)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ImageUrl,
		&i.TargetUrl,
		&i.IsActive,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
